template <class key_t, class val_t>
BSTForwardIterator<key_t, val_t>::BSTForwardIterator(BSTNode<key_t, val_t>* node, BSTNode<key_t, val_t>* sentinel){

this->current = node;
this->sentinel = sentinel;

}

template <class key_t, class val_t>
void BSTForwardIterator<key_t, val_t>::next(){

if ((this->current)->getRightChild() != this->sentinel){
     this->current = (this->current)->getRightChild();
}
else if ((this->current)->getRightChild() != this->sentinel){
     this->current = (this->current)->getRightChild();
}
else if (this->current == this->sentinel){     

}
}

template <class key_t, class val_t>
bool BSTForwardIterator<key_t, val_t>::isPastEnd() const{

if (this->current == this->sentinel)
{
	return true;
}
return false;
}

template <class key_t, class val_t>
const key_t& BSTForwardIterator<key_t, val_t>::getKey() const{

return (this->current)->getKey();
}

template <class key_t, class val_t>
const val_t& BSTForwardIterator<key_t, val_t>::getValue() const{

return (this->current)->getValue();
}

template <class key_t, class val_t>
void BSTForwardIterator<key_t, val_t>::setValue(const val_t& newVal){

(this->current)->setValue(newVal);
}

